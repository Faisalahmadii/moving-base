#include <NewPing.h> // Library for ultrasonic sensors
#include <AFMotor.h> // Library for motor control

int speedSet = 0; // Variable to set motor speed

// Define robot dimensions and other constants
const double RL = 2.10; // Robot length
const double RW = 2.10; // Robot width
const double carW = 0.42; // Car width
const double carL = 0.42; // Car length
const int r = 5; // Number of rows in room matrix
const int c = 5; // Number of columns in room matrix

// Define pins for ultrasonic sensors
#define TRIG_PIN_FRONT_1 A0
#define ECHO_PIN_FRONT_1 A1
#define TRIG_PIN_FRONT_2 A4
#define ECHO_PIN_FRONT_2 A5
#define TRIG_PIN_FRONT_3 A12
#define ECHO_PIN_FRONT_3 A13
#define TRIG_PIN_LEFT A8
#define ECHO_PIN_LEFT A9
#define TRIG_PIN_RIGHT A10
#define ECHO_PIN_RIGHT A11
#define TRIG_PIN_B_1 A2
#define ECHO_PIN_B_1 A3
#define TRIG_PIN_B_2 A14
#define ECHO_PIN_B_2 A15

#define MAX_DISTANCE 200 // Maximum distance for sensors
#define MAX_SPEED 220 // Maximum speed of DC motors
#define MAX_SPEED_OFFSET 20 // Speed offset for motors

// Initialize ultrasonic sensors
NewPing sonarFront1(TRIG_PIN_FRONT_1, ECHO_PIN_FRONT_1, MAX_DISTANCE);
NewPing sonarFront2(TRIG_PIN_FRONT_2, ECHO_PIN_FRONT_2, MAX_DISTANCE);
NewPing sonarFront3(TRIG_PIN_FRONT_3, ECHO_PIN_FRONT_3, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);
NewPing sonarB1(TRIG_PIN_B_1, ECHO_PIN_B_1, MAX_DISTANCE);
NewPing sonarB2(TRIG_PIN_B_2, ECHO_PIN_B_2, MAX_DISTANCE);

double s = 0.55; // Speed of the car in m/s
double del1b = carW / s; // Delay factor based on car width and speed
const double roomMatrix[r][c]; // Room matrix to represent the environment
double distance = del1b * s; // Distance calculation
int carR = 0; // Initial car row position
int carC = 0; // Initial car column position
int targetRow; // Target row position
int targetColumn; // Target column position

// Initialize motors
AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);

// Variables to store distances from sensors
int distanceFront1 = 100;
int distanceFront2 = 100;
int distanceFront3 = 100;
int distanceLeft = 100;
int distanceRight = 100;
int distanceB1 = 100;
int distanceB2 = 100;
double M_F = 0; // Front sensor value for mapping
double M_R = 0; // Right sensor value for mapping
double M_L = 0; // Left sensor value for mapping
double M_B = 0; // Back sensor value for mapping
int room_Map[r][c]; // Room map for navigation

void setup() {
  Serial.begin(9600); // Start serial communication
  
  // Read initial distances from sensors
  distanceFront1 = readPingFront1();
  delay(100);
  distanceFront2 = readPingFront2();
  delay(100);
  distanceFront3 = readPingFront3();
  delay(100);
  distanceB1 = readPingBACKWARD1();
  delay(100);
  distanceB2 = readPingBACKWARD2();
  delay(100);
}

void loop() {
  checkUserInput(); // Check for user input
}

// Function to check for user input from the serial monitor
void checkUserInput() {
  if (Serial.available() > 0) {
    int a = Serial.parseInt(); // Read target row
    delay(5000);
    int b = Serial.parseInt(); // Read target column
    Serial.println(a);
    Serial.println(b);

    targetRow = a;
    targetColumn = b;
    Serial.println(targetRow);
    Serial.println(targetColumn);
    delay(2000);

    // Validate the target position
    if (targetRow >= 0 && targetRow < r && targetColumn >= 0 && targetColumn < c) {
      moveCar(targetRow, targetColumn); // Move car to target position
    } else {
      Serial.println("Invalid row or column index.");
    }

    // Clear the serial buffer
    while (Serial.available() > 0) {
      Serial.read();
    }
  }
}

// Function to move the car to the target position
void moveCar(int targetRow, int targetColumn) {
  int counter = 0;
  bool allDir = false;
  bool putObs = false;

  // Read initial distances from sensors
  distanceFront1 = readPingFront1();
  distanceFront2 = readPingFront2();
  distanceFront3 = readPingFront3();
  distanceLeft = readPingLeft();
  distanceRight = readPingRight();
  distanceB1 = readPingBACKWARD1();
  distanceB2 = readPingBACKWARD2();
  int rowDiff = targetRow - carR; // Difference in rows
  int colDiff = targetColumn - carC; // Difference in columns

  double ddelayC = 1000 * del1b; // Delay calculation for columns
  double ddelayR = 1000 * del1b; // Delay calculation for rows

  // Move to target column
  while (colDiff > 0) {
    // Update sensor readings
    distanceFront1 = readPingFront1();
    distanceFront2 = readPingFront2();
    distanceFront3 = readPingFront3();
    distanceLeft = readPingLeft();
    distanceRight = readPingRight();
    distanceB1 = readPingBACKWARD1();
    distanceB2 = readPingBACKWARD2();

    // Check for obstacles and adjust path
    while (distanceFront1 <= 42 || distanceFront2 <= 42 || distanceFront3 <= 42 || allDir == true && (carR < r - 1 || carR > 0)) {
      if (distanceRight <= 42) {
        if (distanceLeft > 42 && carR > 0) {
          decreaseRow(ddelayR);
          carR--;
          allDir = false;
        } else {
          distanceB1 = readPingBACKWARD1();
          distanceB2 = readPingBACKWARD2();
          if (distanceB1 <= 42 || distanceB2 <= 42) {
            moveStop();
          } else {
            allDir = true;
            decreaseCol(ddelayR);
            carC--;
          }
        }
      } else if (distanceRight > 42 && carR < r - 1) {
        increaseRow(ddelayC);
        carR++;
        delay(500);
        allDir = false;
        counter++;
      } else if (distanceLeft > 42 && carR > 0) {
        for (int i = 0; i < counter; i++) {
          if (counter >= r - 1) {
            break;
          }
          decreaseRow(ddelayR);
          carR--;
        }
        if (carR > 0) {
          decreaseRow(ddelayR);
          carR--;
          allDir = false;
        }
        counter = 0;
      }
      // Update sensor readings
      distanceFront1 = readPingFront1();
      distanceFront2 = readPingFront2();
      distanceFront3 = readPingFront3();
      distanceLeft = readPingLeft();
      distanceRight = readPingRight();
      distanceB1 = readPingBACKWARD1();
      distanceB2 = readPingBACKWARD2();
    }
    increaseCol(ddelayC);
    colDiff--;
    carC++;
    counter = 0;
  }

  rowDiff = targetRow - carR; // Update row difference
  colDiff = targetColumn - carC; // Update column difference

  // Move to target row
  while (rowDiff > 0) {
    distanceFront1 = readPingFront1();
    distanceFront2 = readPingFront2();
    distanceFront3 = readPingFront3();
    distanceLeft = readPingLeft();
    distanceRight = readPingRight();
    distanceB1 = readPingBACKWARD1();
    distanceB2 = readPingBACKWARD2();

    while (distanceRight <= 42 && (carC < c - 1 || carC > 0)) {
      if (distanceFront1 <= 42 || distanceFront2 <= 42 || distanceFront3 <= 42 && (carR < r - 1 || carR > 0)) {
        if (distanceLeft > 42 && carR > 0) {
          decreaseRow(ddelayR);
          carR--;
          rowDiff++;
        } else {
          distanceB1 = readPingBACKWARD1();
          distanceB2 = readPingBACKWARD2();
          if (distanceB1 <= 42 || distanceB2 <= 42) {
            moveStop();
          } else {
            decreaseCol(ddelayR);
            carC--;
          }
        }
      } else {
        if (carC == c - 1) {
          distanceB1 = readPingBACKWARD1();
          distanceB2 = readPingBACKWARD2();
          if (distanceB1 <= 42 || distanceB2 <= 42) {
            moveStop();
          } else {
            decreaseCol(ddelayR);
            carC--;
          }
        } else {
          increaseCol(ddelayC);
          carC++;
          delay(500);
        }
      }
      distanceFront1 = readPingFront1();
      distanceFront2 = readPingFront2();
      distanceFront3 = readPingFront3();
      distanceLeft = readPingLeft();
      distanceRight = readPingRight();
      distanceB1 = readPingBACKWARD1();
      distanceB2 = readPingBACKWARD2();
    }
    increaseRow(ddelayR);
    rowDiff--;
    carR++;
  }

  rowDiff = targetRow - carR; // Update row difference
  colDiff = targetColumn - carC; // Update column difference

  // Move to target row
  while (rowDiff < 0) {
    distanceFront1 = readPingFront1();
    distanceFront2 = readPingFront2();
    distanceFront3 = readPingFront3();
    distanceLeft = readPingLeft();
    distanceRight = readPingRight();
    distanceB1 = readPingBACKWARD1();
    distanceB2 = readPingBACKWARD2();
    while (distanceLeft <= 42 && (carC < c - 1 || carC > 0)) {
      if (distanceFront1 <= 42 || distanceFront2 <= 42 || distanceFront3 <= 42 && (carR < r - 1 || carR > 0)) {
        if (distanceRight > 42 && carR > 0) {
          increaseRow(ddelayR);
          carR++;
          rowDiff--;
        } else {
          distanceB1 = readPingBACKWARD1();
          distanceB2 = readPingBACKWARD2();
          if (distanceB1 <= 42 || distanceB2 <= 42) {
            moveStop();
          } else {
            allDir = true;
            decreaseCol(ddelayR);
            carC--;
          }
        }
      } else {
        increaseCol(ddelayC);
        carC++;
        delay(500);
      }
      distanceFront1 = readPingFront1();
      distanceFront2 = readPingFront2();
      distanceFront3 = readPingFront3();
      distanceLeft = readPingLeft();
      distanceRight = readPingRight();
      distanceB1 = readPingBACKWARD1();
      distanceB2 = readPingBACKWARD2();
    }
    decreaseRow(ddelayR);
    rowDiff++;
    carR--;
  }

  rowDiff = targetRow - carR; // Update row difference
  colDiff = targetColumn - carC; // Update column difference

  // Move to target column
  while (colDiff < 0) {
    distanceFront1 = readPingFront1();
    distanceFront2 = readPingFront2();
    distanceFront3 = readPingFront3();
    distanceLeft = readPingLeft();
    distanceRight = readPingRight();
    distanceB1 = readPingBACKWARD1();
    distanceB2 = readPingBACKWARD2();
    while (distanceB1 <= 42 || distanceB2 <= 42 && (carR < r - 1 || carR > 0)) {
      if (distanceRight <= 42) {
        if (distanceLeft > 42 && carR > 0) {
          decreaseRow(ddelayR);
          carR--;
          allDir = false;
        } else {
          distanceFront1 = readPingFront1();
          distanceFront2 = readPingFront2();
          distanceFront3 = readPingFront3();
          if (distanceFront1 <= 42 || distanceFront2 <= 42 || distanceFront3 <= 42) {
            moveStop();
          } else {
            increaseCol(ddelayR);
            carC++;
          }
        }
      } else if (distanceRight > 42 && carR < r - 1) {
        increaseRow(ddelayC);
        carR++;
        delay(500);
        allDir = false;
        counter++;
      } else if (distanceLeft > 42 && carR > 0) {
        for (int i = 0; i < counter; i++) {
          if (counter >= r - 1) {
            break;
          }
          decreaseRow(ddelayR);
          carR--;
        }
        if (carR > 0) {
          decreaseRow(ddelayR);
          carR--;
          allDir = false;
        }
        counter = 0;
      }
      distanceFront1 = readPingFront1();
      distanceFront2 = readPingFront2();
      distanceFront3 = readPingFront3();
      distanceLeft = readPingLeft();
      distanceRight = readPingRight();
      distanceB1 = readPingBACKWARD1();
      distanceB2 = readPingBACKWARD2();
    }
    decreaseCol(ddelayC);
    colDiff++;
    carC--;
  }

  carR = targetRow; // Update car row position
  carC = targetColumn; // Update car column position

  Serial.println("------------------------------- ");
}

// Function to increase the row position of the car
void increaseRow(double ddelay) {
  turnRight();
  moveStop();
  delay(1000);
  moveForward();
  delay(ddelay);
  moveStop();
  delay(1000);
  turnLeft();
  moveStop();
  delay(1000);
}

// Function to decrease the row position of the car
void decreaseRow(double ddelay) {
  turnLeft();
  moveStop();
  delay(1000);
  moveForward();
  delay(ddelay);
  moveStop();
  delay(1000);
  turnRight();
  moveStop();
  delay(1000);
}

// Function to increase the column position of the car
void increaseCol(double ddelay) {
  moveForward();
  delay(ddelay);
  moveStop();
  delay(1000);
  moveStop();
  delay(1000);
}

// Function to decrease the column position of the car
void decreaseCol(double ddelay) {
  moveBackward();
  delay(ddelay);
  moveStop();
  delay(1000);
}

// Function to stop the car
void SameCol() {
  moveStop();
}

// Function to stop the car
void SameRow() {
  moveStop();
}

// Function to move the car forward
void moveForward() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  speedSet = 190;
  motor1.setSpeed(speedSet);
  motor2.setSpeed(speedSet);
  motor3.setSpeed(speedSet);
  motor4.setSpeed(speedSet);
}

// Function to move the car backward
void moveBackward() {
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  speedSet = 190;
  motor1.setSpeed(speedSet);
  motor2.setSpeed(speedSet);
  motor3.setSpeed(speedSet);
  motor4.setSpeed(speedSet);
}

// Function to turn the car right
void turnRight() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  delay(725);
}

// Function to turn the car left
void turnLeft() {
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  delay(800);
}

// Function to stop the car
void moveStop() {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
}

// Function to read distance from left sensor
int readPingLeft() {
  delay(70);
  int cmLeft = sonarLeft.ping_cm();
  if (cmLeft == 0) {
    cmLeft = 250;
  }
  return cmLeft;
}

// Function to read distance from right sensor
int readPingRight() {
  delay(70);
  int cmRight = sonarRight.ping_cm();
  if (cmRight == 0) {
    cmRight = 250;
  }
  return cmRight;
}

// Function to read distance from front sensor 1
int readPingFront1() {
  delay(70);
  int cmFront1 = sonarFront1.ping_cm();
  if (cmFront1 == 0) {
    cmFront1 = 250;
  }
  return cmFront1;
}

// Function to read distance from front sensor 2
int readPingFront2() {
  delay(70);
  int cmFront2 = sonarFront2.ping_cm();
  if (cmFront2 == 0) {
    cmFront2 = 250;
  }
  return cmFront2;
}

// Function to read distance from front sensor 3
int readPingFront3() {
  delay(70);
  int cmFront3 = sonarFront3.ping_cm();
  if (cmFront3 == 0) {
    cmFront3 = 250;
  }
  return cmFront3;
}

// Function to read distance from backward sensor 1
int readPingBACKWARD1() {
  delay(70);
  int cmB1 = sonarB1.ping_cm();
  if (cmB1 == 0) {
    cmB1 = 250;
  }
  return cmB1;
}

// Function to read distance from backward sensor 2
int readPingBACKWARD2() {
  delay(70);
  int cmB2 = sonarB2.ping_cm();
  if (cmB2 == 0) {
    cmB2 = 250;
  }
  return cmB2;
}