//
/*

AKP's Tech Classroom
 
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
SoftwareSerial abc(13, 15); // RX7, TX8 (Connect Arduino RX to ESP8266 TX, and Arduino TX to ESP826
// Change the credentials below, so your ESP8266 connects to your router
const char* ssid = "";
const char* password = "";
// Change the variable to your Raspberry Pi IP address, so it connects to your MQTT broker
const char* mqtt_server = "";

// Initializes the espClient. You should change the espClient name if you have multiple ESPs running in your home automation system
WiFiClient espClient22;
PubSubClient client(espClient22);

String rak ="";
String Mode = "";
const int ledPin = 0; // Define the pin number for the LED

// Lamp - LED - GPIO 4 = D2 on ESP-12E NodeMCU board
//const int led = 4;


//Connect your NodeMCU to your router
void setup_wifi() {
   delay(10);
  
   Serial. println();

   Serial.print("Connecting to ");
   Serial.println(ssid);
   WiFi.mode(WIFI_STA);
   WiFi.begin(ssid, password);
                   

   while (WiFi.status() != WL_CONNECTED) {
     delay(100);
     Serial.print("");
          

   }
   Serial.println("");
   Serial.print("WiFi connected - NodeMCU IP address: ");
   Serial.println(WiFi.localIP());
}

// These functions are executed when some device publishes a message to a topic that your NodeMCU is subscribed to

void callback(String topic, byte* message, unsigned int length) {
   Serial.print("Message arrived on topic: ");
   Serial.print(topic);
   Serial.print(". Message: ");
   int it;
   int jt;
   for (int i = 0; i < length; i++) {
     Serial.print((char)message[i]);
     it = (char)message[i];
   }
   /*
    for (int j = 0; j < length; j++) {
     Serial.print((char)message[j]);
     jt = (char)message[j];
    
   }
   */
   Serial. println();
   
  
   // If a message is received on the topic room/lamp, you check if the message is either on or off. Turns the GPIO lamp according to the message
   if(topic=="room/light"){
       Serial.print("Changing Room Light to ");
abc.write(it);
   Serial. println(it);

   }
    if(topic=="room/light2"){
       Serial.print("Changing Room Light to ");
abc.write(it);
   Serial.println(it);

   }
   Serial. println();
}

// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266
void reconnect() {
   // Loop until we're reconnected
   while (!client.connected()) {
     Serial.print("Attempting MQTT connection...");

     if (client.connect("ESP8266Client22")) {
       Serial.println("connected");

       // Subscribe or resubscribe to a topic
       // You can subscribe to more topics (to control more LEDs in this example)
       client.subscribe("room/light");
              client.subscribe("room/light2");

     } else {
       Serial.print("failed, rc=");
       Serial.print(client.state());
       Serial.println("try again in 5 seconds");
       abc.write('0');
       // Wait 5 seconds before retrying
       delay(5000);
     }
   }
}

// The setup function sets your ESP GPIOs to Outputs, starts the serial communication at a baud rate of 115200
// Sets your mqtt broker and sets the callback function
// The callback function is what receives messages and actually controls the LEDs
void setup() {
  // pinMode(led, OUTPUT);
   Serial.begin(115200);
   setup_wifi();
   client.setServer(mqtt_server, 1883);
   client. setCallback(callback);
   abc.begin(9600);
  
  pinMode(ledPin, OUTPUT);
}

// For this project, you don't need to change anything in the loop function. Basically it ensures that the NodeMCU is connected to MQTT broker
void loop() {

   if (!client.connected()) {
    digitalWrite(ledPin, HIGH);
     reconnect();
   }
   if(!client.loop())
     client.connect("ESP8266Client22");
     digitalWrite(ledPin, LOW);
                    
   }