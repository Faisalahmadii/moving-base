#include <AFMotor.h>
#include <NewPing.h>

// Define the pin numbers for the ultrasonic sensors
#define TRIG_PIN_FRONT_1 A0
#define ECHO_PIN_FRONT_1 A1
#define TRIG_PIN_FRONT_2 A4
#define ECHO_PIN_FRONT_2 A5
#define TRIG_PIN_FRONT_3 A12
#define ECHO_PIN_FRONT_3 A13
#define TRIG_PIN_LEFT A8
#define ECHO_PIN_LEFT A9
#define TRIG_PIN_RIGHT A10
#define ECHO_PIN_RIGHT A11
#define TRIG_PIN_B_1 A2
#define ECHO_PIN_B_1 A3
#define TRIG_PIN_B_2 A14
#define ECHO_PIN_B_2 A15

#define MAX_DISTANCE 200 // Maximum distance to measure (in cm)
#define MAX_SPEED 190 // Maximum speed of DC motors
#define MAX_SPEED_OFFSET 20 // Speed offset for motors

// Initialize the ultrasonic sensors
NewPing sonarFront1(TRIG_PIN_FRONT_1, ECHO_PIN_FRONT_1, MAX_DISTANCE);
NewPing sonarFront2(TRIG_PIN_FRONT_2, ECHO_PIN_FRONT_2, MAX_DISTANCE);
NewPing sonarFront3(TRIG_PIN_FRONT_3, ECHO_PIN_FRONT_3, MAX_DISTANCE);
NewPing sonarLeft(TRIG_PIN_LEFT, ECHO_PIN_LEFT, MAX_DISTANCE);
NewPing sonarRight(TRIG_PIN_RIGHT, ECHO_PIN_RIGHT, MAX_DISTANCE);
NewPing sonarB1(TRIG_PIN_B_1, ECHO_PIN_B_1, MAX_DISTANCE);
NewPing sonarB2(TRIG_PIN_B_2, ECHO_PIN_B_2, MAX_DISTANCE);

// Initialize the motors
AF_DCMotor motor1(1, MOTOR12_1KHZ);
AF_DCMotor motor2(2, MOTOR12_1KHZ);
AF_DCMotor motor3(3, MOTOR34_1KHZ);
AF_DCMotor motor4(4, MOTOR34_1KHZ);

boolean goesForward = false; // Boolean to check if the robot is moving forward
int distanceFront1 = 100; // Distance measured by front sensor 1
int distanceFront2 = 100; // Distance measured by front sensor 2
int distanceFront3 = 100; // Distance measured by front sensor 3
int distanceLeft = 100; // Distance measured by left sensor
int distanceRight = 100; // Distance measured by right sensor
int speedSet = 190; // Speed of the motors
int distanceB1 = 100; // Distance measured by backward sensor 1
int distanceB2 = 100; // Distance measured by backward sensor 2

void setup() {
  Serial.begin(9600); // Start the serial communication
  
  // Read initial distances from all sensors
  distanceFront1 = readPingFront1();
  delay(100);
  distanceFront2 = readPingFront2();
  delay(100);
  distanceFront3 = readPingFront3();
  delay(100);
  distanceB1 = readPingBACKWARD1();
  delay(100);
  distanceB2 = readPingBACKWARD2();
  delay(100);
}

void loop() {
  if (Serial.available()) {
    String command = Serial.readString(); // Read command from serial input
    if (command == "manual") {
      moveStop(); // Stop the robot
    }
    if (command == "f") {
      moveForward(); // Move forward
      delay(1000);
      moveStop();
      Serial.println(command);
    }
    if (command == "b") {
      moveBackward(); // Move backward
      delay(1000);
      moveStop();
      Serial.println(command);
    }
    if (command == "r") {
      turnRight(); // Turn right
      delay(100);
      moveStop();
      Serial.println(command);
    }
    if (command == "l") {
      turnLeft(); // Turn left
      delay(100);
      moveStop();
      Serial.println(command);
    }

    // Automatic mode
    while (command == "auto") {
      // Check for new commands at the beginning of the loop
      if (Serial.available()) {
        command = Serial.readString();
        // If a new command is received, break the loop
        if (command == "manual") {
          moveStop();
          break;
        }
      }

      // Read distances from the sensors
      distanceFront1 = readPingFront1();
      distanceFront2 = readPingFront2();
      distanceFront3 = readPingFront3();
      distanceLeft = readPingLeft();
      distanceRight = readPingRight();

      // Check if any front sensor detects an obstacle
      if (distanceFront1 <= 25 || distanceFront2 <= 25 || distanceFront3 <= 25) {
        moveStop();
        delay(100);
        Serial.println("yes Front ");
        moveBackward();
        delay(300);
        moveStop();

        // Decide whether to turn left or right based on the distances
        if (distanceRight > distanceLeft) {
          Serial.println("yes Right ");
          turnRight();
          moveStop();
        } else if (distanceLeft > distanceRight) {
          Serial.println("yes Left ");
          turnLeft();
          moveStop();
        }
      } else {
        moveForward(); // Move forward if no obstacle is detected
      }
    }
  }
}

// Function to read distance from front sensor 1
int readPingFront1() {
  delay(70);
  int cmFront1 = sonarFront1.ping_cm();
  if (cmFront1 == 0) {
    cmFront1 = 250; // Set to max distance if no object is detected
  }
  return cmFront1;
}

// Function to read distance from front sensor 2
int readPingFront2() {
  delay(70);
  int cmFront2 = sonarFront2.ping_cm();
  if (cmFront2 == 0) {
    cmFront2 = 250; // Set to max distance if no object is detected
  }
  return cmFront2;
}

// Function to read distance from front sensor 3
int readPingFront3() {
  delay(70);
  int cmFront3 = sonarFront3.ping_cm();
  if (cmFront3 == 0) {
    cmFront3 = 250; // Set to max distance if no object is detected
  }
  return cmFront3;
}

// Function to read distance from left sensor
int readPingLeft() {
  delay(70);
  int cmLeft = sonarLeft.ping_cm();
  if (cmLeft == 0) {
    cmLeft = 250; // Set to max distance if no object is detected
  }
  return cmLeft;
}

// Function to read distance from right sensor
int readPingRight() {
  delay(70);
  int cmRight = sonarRight.ping_cm();
  if (cmRight == 0) {
    cmRight = 250; // Set to max distance if no object is detected
  }
  return cmRight;
}

// Function to read distance from backward sensor 1
int readPingBACKWARD1() {
  delay(70);
  int cmB1 = sonarB1.ping_cm();
  if (cmB1 == 0) {
    cmB1 = 250; // Set to max distance if no object is detected
  }
  return cmB1;
}

// Function to read distance from backward sensor 2
int readPingBACKWARD2() {
  delay(70);
  int cmB2 = sonarB2.ping_cm();
  if (cmB2 == 0) {
    cmB2 = 250; // Set to max distance if no object is detected
  }
  return cmB2;
}

// Function to stop the robot
void moveStop() {
  motor1.run(RELEASE);
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
}

// Function to move the robot forward
void moveForward() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  speedSet = 190;
  motor1.setSpeed(speedSet);
  motor2.setSpeed(speedSet);
  motor3.setSpeed(speedSet);
  motor4.setSpeed(speedSet);
  delay(5);
}

// Function to move the robot backward
void moveBackward() {
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  speedSet = 190;
  motor1.setSpeed(speedSet);
  motor2.setSpeed(speedSet);
  motor3.setSpeed(speedSet);
  motor4.setSpeed(speedSet);
  delay(5);
}

// Function to turn the robot right
void turnRight() {
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(BACKWARD);
  motor4.run(BACKWARD);
  delay(500);
}

// Function to turn the robot left
void turnLeft() {
  motor1.run(BACKWARD);
  motor2.run(BACKWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  delay(500);
}